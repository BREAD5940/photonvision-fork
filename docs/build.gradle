// From allwpilib/docs. Licensed under the WPILib BSD License

plugins {
    id 'java'
    id "org.ysb33r.doxygen" version "0.7.0"
}


evaluationDependsOn ':photon-targeting'
evaluationDependsOn ':photon-core'
evaluationDependsOn ':photon-server'
evaluationDependsOn ':photon-lib'


def baseArtifactIdCpp = 'documentation'
def artifactGroupIdCpp = 'org.photonvision.wpilibc'
def zipBaseNameCpp = '_GROUP_org.photonvision_cpp_ID_documentation_CLS'

def baseArtifactIdJava = 'documentation'
def artifactGroupIdJava = 'org.photonvision.wpilibj'
def zipBaseNameJava = '_GROUP_org.photonvision_java_ID_documentation_CLS'

def outputsFolder = file("$project.buildDir/outputs")

def cppProjectZips = []
def cppIncludeRoots = []

cppProjectZips.add(project(':photon-lib').cppHeadersZip)
cppProjectZips.add(project(':photon-targeting').cppHeadersZip)


// Java
configurations {
    javaSource {
        transitive false
    }
}

ext {
    sharedCvConfigs = [:]
    staticCvConfigs = [:]
    useJava = true
    useCpp = false
    skipDev = true
    useDocumentation = true
}

task generateJavaDocs(type: Javadoc) {
    def exportedProjects = [
        ':photon-core',
        ':photon-server',
        ':photon-targeting',
        ':photon-lib'
    ]

    source exportedProjects.collect { project(it).sourceSets.main.allJava }
    classpath = files(exportedProjects.collect { project(it).sourceSets.main.compileClasspath })
    dependsOn project(':photon-core').writeCurrentVersion

    options.links("https://docs.oracle.com/en/java/javase/17/docs/api/")
    options.addStringOption("tag", "pre:a:Pre-Condition")
    options.addBooleanOption("Xdoclint:html,missing,reference,syntax", true)
    options.addBooleanOption('html5', true)
    failOnError = true

    title = "PhotonVision $pubVersion"
    ext.entryPoint = "$destinationDir/index.html"

    if (JavaVersion.current().isJava8Compatible() && project.hasProperty('docWarningsAsErrors')) {
        // Treat javadoc warnings as errors.
        //
        // The second argument '-quiet' is a hack. The one parameter
        // addStringOption() doesn't work, so we add '-quiet', which is added
        // anyway by gradle. See https://github.com/gradle/gradle/issues/2354.
        //
        // See JDK-8200363 (https://bugs.openjdk.java.net/browse/JDK-8200363)
        // for information about the nonstandard -Xwerror option. JDK 15+ has
        // -Werror.
        options.addStringOption('Xwerror', '-quiet')
    }

    if (JavaVersion.current().isJava11Compatible()) {
        if (!JavaVersion.current().isJava12Compatible()) {
            options.addBooleanOption('-no-module-directories', true)
        }
        doLast {
            // This is a work-around for https://bugs.openjdk.java.net/browse/JDK-8211194. Can be removed once that issue is fixed on JDK's side
            // Since JDK 11, package-list is missing from javadoc output files and superseded by element-list file, but a lot of external tools still need it
            // Here we generate this file manually
            new File(destinationDir, 'package-list').text = new File(destinationDir, 'element-list').text
        }
    }
}

apply plugin: 'maven-publish'

publishing {
    publications {
        java(MavenPublication) {

            artifactId = "${baseArtifactIdJava}"
            groupId artifactGroupIdJava
            version pubVersion
        }
        cpp(MavenPublication) {

            artifactId = "${baseArtifactIdCpp}"
            groupId artifactGroupIdCpp
            version pubVersion
        }
    }
}
